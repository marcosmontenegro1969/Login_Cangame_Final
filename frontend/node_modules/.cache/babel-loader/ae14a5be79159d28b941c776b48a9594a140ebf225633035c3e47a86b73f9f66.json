{"ast":null,"code":"var _jsxFileName = \"C:\\\\react-login\\\\frontend\\\\src\\\\components\\\\Login.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\"; //importa a biblioteca Axios para realizar solicitações HTTP ao servidor.\nimport { useState } from \"react\"; //importa a função useState do React. Ela é um hook que permite adicionar estado a componentes de função.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  _s();\n  //cria o componente Login. Ele é uma função que retorna um elemento JSX.\n  const [nome, setNome] = useState(''); //cria o estado \"nome\" e a função \"setNome\" para atualizá-lo, e o inicializa com uma string vazia.\n  const [senha, setSenha] = useState(''); //cria o estado \"senha\" e a função \"setSenha\" para atualizá-lo, e o inicializa com uma string vazia.\n  const [error, setError] = useState(''); //cria o estado \"error\" e a função \"setError\" para atualizá-lo, e o inicializa com uma string vazia.\n  const [usuario, setUsuario] = useState(null); //cria o estado \"usuario\" e a função \"setUsuario\" para atualizá-lo, e o inicializa com \"null\".\n\n  const handleLogin = async evento => {\n    //cria uma função assíncrona que recebe um evento (click) como parâmetro.\n    evento.preventDefault(); //impede a ação padrão do evento clique (envio dos dados do formulário e recarregamento da página).\n\n    try {\n      //tenta executar o código abaixo. Se ocorrer um erro, o bloco catch será executado.\n      const response = await axios.post(\n      //envia uma solicitação de login para o servidor utilizando Axios.\n      'http://localhost:3000/login',\n      //URL do servidor que receberá a solicitação.\n      JSON.stringify({\n        nome,\n        senha\n      }),\n      //dados que serão enviados para o servidor. Neste caso, o nome e a senha.\n      {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }); //configura o cabeçalho padrão da solicitação JSON.\n\n      setUsuario(response.data); //se a resposta da solicitação foi 200 (bem sucedida), atualiza o estado \"usuario\" com os dados do usuário.\n    } catch (error) {\n      //se ocorrer um erro durante a solicitação:\n      if (!(error !== null && error !== void 0 && error.response)) {\n        //se o servidor respondeu com nulo ou indefinido.\n        setError('Erro ao acessar o servidor'); //define uma mensagem de erro que não foi possível acessar o servidor.\n      } else if (error.response.status === 401) {\n        //se o servidor respondeu um status 401 (Não autorizado)\n        setError('Usuário ou senha inválidos'); //define uma mensagem de erro que o usuário ou senha são inválidos.\n      }\n    }\n  };\n  const handleLogout = () => {\n    //cria uma função que não recebe parâmetros.\n    setUsuario(null); //atualiza o estado \"usuario\" com nulo.\n    setError(''); //atualiza o estado \"error\" com uma string vazia.\n  };\n  return (\n    /*#__PURE__*/\n    //retorna o elemento JSX abaixo.\n    _jsxDEV(\"div\", {\n      className: \"login-container\",\n      children: [\" \", usuario == null ?\n      /*#__PURE__*/\n      //cria um operador ternário que verifica se o estado \"usuario\" é nulo.\n      _jsxDEV(\"div\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"login-image\",\n          children: \"apenas uma imagem de fundo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"login-formulario\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"formulario_Login\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nome\",\n              style: {\n                display: 'inline-block',\n                marginLeft: '16px'\n              },\n              children: \"Nome\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"nome\",\n              placeholder: \"nome\",\n              required: true,\n              onChange: evento => setNome(evento.target.value),\n              onFocus: () => setError('')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"password\",\n              style: {\n                display: 'inline-block',\n                marginLeft: '16px'\n              },\n              children: \"Senha\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\" //cria um campo de entrada de texto do tipo \"password\" para a senha\n              ,\n              name: \"senha\" //define o nome do campo como \"senha\"\n              ,\n              placeholder: \"senha\" //define o placeholder do campo como \"senha\"\n              ,\n              required: true //define que o campo é obrigatório\n              ,\n              onChange: evento => setSenha(evento.target.value) //a função \"setSenha\" será executada na alteração deste campo.\n              ,\n              onFocus: () => setError('')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\" //cria um botão do tipo \"submit\" para enviar os dados do formulário\n              ,\n              className: \"btn-login\" //define a classe do botão como \"btn-login\"\n              ,\n              onClick: evento => handleLogin(evento),\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"div_Logado\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Ol\\xE1 \", usuario.nome, \", v\\xE1 pra tela de Jo\\xE3o\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\" //cria um botão do tipo \"button\" para sair da tela de login\n          ,\n          className: \"btn_Logado\" //define a classe do botão como \"btn_Logado\"\n          ,\n          onClick: () => handleLogout(),\n          children: \"Sair\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(Login, \"Iu07qul3LC0kzIrExfVkx0DeGiY=\");\n_c = Login;\nexport default Login; //exporta o componente Login para ser importado e utilizado em outros arquivos do projeto.\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["axios","useState","jsxDEV","_jsxDEV","Login","_s","nome","setNome","senha","setSenha","error","setError","usuario","setUsuario","handleLogin","evento","preventDefault","response","post","JSON","stringify","headers","data","status","handleLogout","className","children","class","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","style","display","marginLeft","type","name","placeholder","required","onChange","target","value","onFocus","onClick","id","_c","$RefreshReg$"],"sources":["C:/react-login/frontend/src/components/Login.js"],"sourcesContent":["import axios from \"axios\"; //importa a biblioteca Axios para realizar solicitações HTTP ao servidor.\r\nimport { useState } from \"react\"; //importa a função useState do React. Ela é um hook que permite adicionar estado a componentes de função.\r\n\r\nfunction Login() { //cria o componente Login. Ele é uma função que retorna um elemento JSX.\r\n  const [nome, setNome] = useState(''); //cria o estado \"nome\" e a função \"setNome\" para atualizá-lo, e o inicializa com uma string vazia.\r\n  const [senha, setSenha] = useState(''); //cria o estado \"senha\" e a função \"setSenha\" para atualizá-lo, e o inicializa com uma string vazia.\r\n  const [error, setError] = useState(''); //cria o estado \"error\" e a função \"setError\" para atualizá-lo, e o inicializa com uma string vazia.\r\n  const [usuario, setUsuario] = useState(null); //cria o estado \"usuario\" e a função \"setUsuario\" para atualizá-lo, e o inicializa com \"null\".\r\n  \r\n  const handleLogin = async(evento) => { //cria uma função assíncrona que recebe um evento (click) como parâmetro.\r\n    evento.preventDefault(); //impede a ação padrão do evento clique (envio dos dados do formulário e recarregamento da página).\r\n\r\n    try { //tenta executar o código abaixo. Se ocorrer um erro, o bloco catch será executado.\r\n      const response = await axios.post( //envia uma solicitação de login para o servidor utilizando Axios.\r\n        'http://localhost:3000/login', //URL do servidor que receberá a solicitação.\r\n        JSON.stringify({ nome, senha }), //dados que serão enviados para o servidor. Neste caso, o nome e a senha.\r\n        { headers: { 'Content-Type': 'application/json' }}); //configura o cabeçalho padrão da solicitação JSON.\r\n    \r\n      setUsuario(response.data); //se a resposta da solicitação foi 200 (bem sucedida), atualiza o estado \"usuario\" com os dados do usuário.\r\n    \r\n    } catch (error) { //se ocorrer um erro durante a solicitação:\r\n      if (!error?.response) { //se o servidor respondeu com nulo ou indefinido.\r\n        setError('Erro ao acessar o servidor'); //define uma mensagem de erro que não foi possível acessar o servidor.\r\n      } else if (error.response.status === 401) { //se o servidor respondeu um status 401 (Não autorizado)\r\n        setError('Usuário ou senha inválidos'); //define uma mensagem de erro que o usuário ou senha são inválidos.\r\n      }\r\n    }\r\n      };\r\n\r\n  const handleLogout = () => { //cria uma função que não recebe parâmetros.\r\n    setUsuario(null); //atualiza o estado \"usuario\" com nulo.\r\n    setError(''); //atualiza o estado \"error\" com uma string vazia.\r\n  };\r\n  \r\n  return ( //retorna o elemento JSX abaixo.\r\n    <div className = 'login-container'> {/*div para conter todos os elementos do formulário de login.*/}\r\n      {usuario == null ? ( //cria um operador ternário que verifica se o estado \"usuario\" é nulo.\r\n        <div> {/*cria uma div para conter os elementos do formulário de login. (exigencia operador ternário*/}\r\n\r\n            <div class=\"login-image\">\r\n              apenas uma imagem de fundo\r\n            </div>\r\n\r\n            <div class=\"login-formulario\">\r\n              <form className = 'formulario_Login'> {/*cria um formulario para conter os dados que serão enviados ao servidor*/}\r\n\r\n                <label htmlFor=\"nome\" style={{ display: 'inline-block', marginLeft: '16px' }}>Nome</label> {/*cria um label para o campo de entrada de texto do nome*/}\r\n                <input type=\"text\"\r\n                      name=\"nome\"\r\n                      placeholder=\"nome\"\r\n                      required\r\n                      onChange={(evento) => setNome(evento.target.value)}\r\n                      onFocus={() => setError('')}/>\r\n                <label htmlFor=\"password\" style={{ display: 'inline-block', marginLeft: '16px' }}>Senha</label> {/*cria um label para o campo de entrada de texto da senha*/}\r\n                <input type=\"password\" //cria um campo de entrada de texto do tipo \"password\" para a senha\r\n                      name=\"senha\" //define o nome do campo como \"senha\"\r\n                      placeholder = \"senha\" //define o placeholder do campo como \"senha\"\r\n                      required //define que o campo é obrigatório\r\n                      onChange={(evento) => setSenha(evento.target.value)} //a função \"setSenha\" será executada na alteração deste campo.\r\n                      onFocus={() => setError('')}/>\r\n                <button type=\"submit\" //cria um botão do tipo \"submit\" para enviar os dados do formulário\r\n                        className='btn-login' //define a classe do botão como \"btn-login\"\r\n                        onClick = {(evento) => handleLogin(evento)}>Login</button> {/*a função \"handleLogin\" será executada no clique do botão*/}\r\n              </form>\r\n            </div>\r\n          <p>{error}</p> {/*cria um parágrafo onde será exibida a mensagem de erro*/}\r\n        </div>\r\n      ) : (\r\n          <div id=\"div_Logado\"> {/*cria uma div os elementos da mensagem de boas vindas. (exigencia do operador ternário)*/}\r\n            <h2>Olá {usuario.nome}, vá pra tela de João</h2> {/*dá boas-vindas e sugere que o usuário vá para a tela de João*/}\r\n            <button type=\"button\" //cria um botão do tipo \"button\" para sair da tela de login\r\n                    className='btn_Logado' //define a classe do botão como \"btn_Logado\"\r\n                    onClick={() => handleLogout()}>Sair</button> {/*a função \"handleLogout\" será executada no clique do botão*/}\r\n          </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login; //exporta o componente Login para ser importado e utilizado em outros arquivos do projeto.\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}