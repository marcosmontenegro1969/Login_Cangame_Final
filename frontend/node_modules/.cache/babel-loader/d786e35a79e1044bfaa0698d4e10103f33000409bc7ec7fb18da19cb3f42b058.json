{"ast":null,"code":"var _jsxFileName = \"C:\\\\react-login\\\\frontend\\\\appfront\\\\src\\\\components\\\\Login.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState } from \"react\"; //Importa a função useState do React. Ela é um hook que permite adicionar estado a componentes de função.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  _s();\n  //Usa o hook useState para criar estados para 3 propriedades (email, senha e error).\n  //setEmail, setSenha e setError são funções que atualizam os estados de cada um.\n  const [email, setEmail] = useState(''); //cria um estado para armazenar o email, e o inicializa com uma string vazia.\n  const [senha, setSenha] = useState(''); //cria um estado para armazenar a senha, e o inicializa com uma string vazia.\n  const [error, setError] = useState(''); //cria um estado para armazenar o erro de login, e o inicializa com uma string vazia.\n\n  //Define uma função assíncrona chamada \"handleLogin\" que manipula o evento de clique\n  //no botão de login.\n  const handleLogin = async evento => {\n    //impede o comportamento padrão do evento clique, que seria o envio dos dados do formulário\n    //para o servidor, resultando em uma recarga completa da página. Com o \"preventDefault()\" a\n    //página não será recarregada, e os dados do formulário não serão enviados para o servidor.\n    evento.preventDefault();\n\n    //Exibe no console do navegador os valores de email e senha, que foram atualizados pelos\n    //campos input do formulário.\n    console.log(email, senha);\n    try {\n      const response = await axios.post('http://localhost:3000/login', JSON.stringify({\n        email,\n        senha\n      }), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    } catch (error) {\n      if (!(error !== null && error !== void 0 && error.response)) {\n        setError('Erro ao acessar o servidor');\n      } else if (error.response.status === 401) {\n        setError('Usuário ou senha inválidos');\n      }\n    }\n  };\n\n  //Define a estrutura do componente de login. Composta de um formulário com dois campos \"input\"\n  //de entrada de e-mail e senha, e um botão de login.\n  return (\n    /*#__PURE__*/\n    //cria a div principal que vai conter todo o formulario\n    _jsxDEV(\"div\", {\n      className: \"container_Formulario_Login\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"formulario_Login\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"email\",\n          placeholder: \"email\",\n          required: true,\n          onChange: evento => setEmail(evento.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"senha\",\n          placeholder: \"senha\",\n          required: true,\n          onChange: evento => setSenha(evento.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn-login\",\n          onClick: evento => handleLogin(evento),\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n//Permite a exportação do componente Login para que possa ser usado em outros arquivos.\n_s(Login, \"frDc/Ih4yLus/kGRMALenpIqcKs=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["axios","useState","jsxDEV","_jsxDEV","Login","_s","email","setEmail","senha","setSenha","error","setError","handleLogin","evento","preventDefault","console","log","response","post","JSON","stringify","headers","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","name","placeholder","required","onChange","target","value","onClick","_c","$RefreshReg$"],"sources":["C:/react-login/frontend/appfront/src/components/Login.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { useState } from \"react\"; //Importa a função useState do React. Ela é um hook que permite adicionar estado a componentes de função.\r\n\r\nfunction Login() {\r\n  //Usa o hook useState para criar estados para 3 propriedades (email, senha e error).\r\n  //setEmail, setSenha e setError são funções que atualizam os estados de cada um.\r\n  const [email, setEmail] = useState(''); //cria um estado para armazenar o email, e o inicializa com uma string vazia.\r\n  const [senha, setSenha] = useState(''); //cria um estado para armazenar a senha, e o inicializa com uma string vazia.\r\n  const [error, setError] = useState(''); //cria um estado para armazenar o erro de login, e o inicializa com uma string vazia.\r\n  \r\n  //Define uma função assíncrona chamada \"handleLogin\" que manipula o evento de clique\r\n  //no botão de login.\r\n  const handleLogin = async(evento) => {\r\n    //impede o comportamento padrão do evento clique, que seria o envio dos dados do formulário\r\n    //para o servidor, resultando em uma recarga completa da página. Com o \"preventDefault()\" a\r\n    //página não será recarregada, e os dados do formulário não serão enviados para o servidor.\r\n    evento.preventDefault();\r\n\r\n    //Exibe no console do navegador os valores de email e senha, que foram atualizados pelos\r\n    //campos input do formulário.\r\n    console.log (email, senha);\r\n    try {\r\n      const response = await axios.post('http://localhost:3000/login',\r\n        JSON.stringify ({email, senha}),\r\n        {headers: {'Content-Type': 'application/json'}});\r\n    } catch (error) {\r\n      if (!error?.response) {\r\n        setError('Erro ao acessar o servidor');\r\n      } else if (error.response.status === 401) {\r\n        setError('Usuário ou senha inválidos');\r\n      }\r\n    }\r\n \r\n  }\r\n  \r\n  //Define a estrutura do componente de login. Composta de um formulário com dois campos \"input\"\r\n  //de entrada de e-mail e senha, e um botão de login.\r\n  return (\r\n    \r\n    //cria a div principal que vai conter todo o formulario\r\n    <div className = 'container_Formulario_Login'>\r\n      \r\n      <h2>Login</h2> {/*cria o titulo \"Login\"*/}\r\n\r\n      {/*cria um formulario para conter os dados que serão enviados ao servidor*/}\r\n      <form className = 'formulario_Login'> \r\n        \r\n        {/*cria os campos input e define \"placeholder\" para ambos */}\r\n        {/*onChange é um evento que ocorre quando o valor do campo é alterado.*/}\r\n        {/*onChange={(evento) => setEmail(evento.target.value)} é uma função que recebe um evento e atualiza o estado \r\n        \"email\" com o valor do campo input.*/}\r\n        {/*onChange={(evento) => setSenha(evento.target.value)} é uma função que recebe um evento e atualiza o estado\r\n         \"senha\" com o valor do campo input.*/}\r\n        <input type=\"email\" name=\"email\" placeholder= \"email\" required onChange={(evento) => setEmail(evento.target.value)}/>\r\n        <input type=\"password\" name=\"senha\" placeholder = \"senha\" required onChange={(evento) => setSenha(evento.target.value)}/>\r\n\r\n        {/*cria um botão padrão para enviar os dados. Quando o botão é acionado (pelo cique do mouse ou enter\r\n        no teclado), o \"onClick\" chama a função handleLogin, e passa pra ela o parâmetro \"evento\", que neste caso\r\n        é o \"clique\".*/}\r\n        <button type=\"submit\" className='btn-login' onClick = {(evento) => handleLogin(evento)}>Login</button>\r\n      </form>\r\n      <p>error</p>\r\n    </div>\r\n  );\r\n}\r\n\r\n//Permite a exportação do componente Login para que possa ser usado em outros arquivos.\r\nexport default Login;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}